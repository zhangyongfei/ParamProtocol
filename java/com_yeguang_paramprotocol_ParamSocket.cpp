/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_yeguang_paramprotocol_ParamSocket.h"
#include "ParamSocket.h"
#include "JniCommon.h"
#include "ValueObject.h"

//////////////////////////////////////////////////////////////////////////

#define CHARVALUE      1
#define SHORTVALUE     2
#define INTVALUE       3
#define LONGVALUE      4
#define FLOATVALUE     5
#define DOUBLEVALUE    6
#define STRINGVALUE    7
#define BYTEARRAYVALUE 8

yeguang::ParamSocket *GetSocket(JNIEnv *env, jobject obj)
{
	// call Lcom/yeguang/paramprotocol/ParamSocket; getSock
	jmethodID mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamSocket;",
		"getSock", "(V)V");

	yeguang::ParamSocket *sock = (yeguang::ParamSocket *)env->CallLongMethod(obj, mid);

	return sock;
}

int GetArgsCount(JNIEnv *env, jobject args)
{
	jmethodID mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArgs;",
		"getCount", "(V)I");

	return env->CallIntMethod(args, mid);
}

bool GetArg(JNIEnv *env, jobject args, int index, yeguang::ValueObject& valueobj)
{
	bool res = false;

	jmethodID mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArgs;",
		"getArg", "(V)Lcom/yeguang/paramprotocol/ParamArg;");

	jobject arg = env->CallObjectMethod(args, mid);

	mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
		"getType", "(V)I");

	int type = env->CallIntMethod(arg, mid);

	switch(type)
	{
	case CHARVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getCharValue", "(V)C");

			jchar tmpvalue = env->CallCharMethod(arg, mid);

			valueobj = yeguang::ValueObject(tmpvalue);
			res = true;
		}break;
	case SHORTVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getShortValue", "(V)S");

			jshort tmpvalue = env->CallShortMethod(arg, mid);

			valueobj = yeguang::ValueObject(tmpvalue);
			res = true;
		}break;
	case INTVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getIntValue", "(V)I");

			jint tmpvalue = env->CallIntMethod(arg, mid);

			valueobj = yeguang::ValueObject(tmpvalue);
			res = true;
		}break;
	case LONGVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getLongValue", "(V)J");

			jlong tmpvalue = env->CallLongMethod(arg, mid);

			valueobj = yeguang::ValueObject(tmpvalue);
			res = true;
		}break;
	case FLOATVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getFloatValue", "(V)F");

			jfloat tmpvalue = env->CallFloatMethod(arg, mid);

			valueobj = yeguang::ValueObject(tmpvalue);
			res = true;
		}break;
	case DOUBLEVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getDoubleValue", "(V)D");

			jdouble tmpvalue = env->CallDoubleMethod(arg, mid);

			valueobj = yeguang::ValueObject(tmpvalue);
			res = true;
		}break;
	case STRINGVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getStringValue", "(V)Ljava/lang/String;");

			jstring tmpvalue = (jstring)env->CallObjectMethod(arg, mid);

			char *name = jstringTostring(env, tmpvalue);
			valueobj = yeguang::ValueObject(name);
			free(name);

			res = true;
		}break;
	case BYTEARRAYVALUE:
		{
			mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamArg;",
				"getByteArrayValue", "(V)[B");

			jbyteArray tmpvalue = (jbyteArray)env->CallObjectMethod(arg, mid);

			jbyte *data = (jbyte*)env->GetByteArrayElements(tmpvalue, 0);
			jsize len = env->GetArrayLength(tmpvalue);
			valueobj = yeguang::ValueObject((uint8_t*)data, len);
			env->ReleaseByteArrayElements(tmpvalue, data, 0);

			res = true;
		}break;
	default:
		break;
	}

	return res;
}

int JniSendCallback(const char * const data, int data_len, void* context)
{
	JNIEnv *env;
	GetJniEnv((void **)&env_);
}

int JniRecvCallback(uint32_t function_id, yeguang::ParamArgs& args, void* context)
{

}

int JniCheckCallback(void* context)
{

}



//////////////////////////////////////////////////////////////////////////


JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void *reserved) //这是JNI_OnLoad的声明，必须按照这样的方式声明
{
	jvm_ = vm;

	thrd_id_ = PthreadSelf();

	if(vm->GetEnv((void**)&env_, JNI_VERSION_1_4) != JNI_OK) //从JavaVM获取JNIEnv，一般使用1.4的版本
		    return -1;	 

	return JNI_VERSION_1_4; //这里很重要，必须返回版本，否则加载会失败。
}

/*
 * Class:     com_yeguang_paramprotocol_ParamSocket
 * Method:    Create
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yeguang_paramprotocol_ParamSocket_Create
  (JNIEnv *env, jobject obj)
{
	yeguang::ParamSocket *sock = yeguang::ParamSocket::Create();

	// call Lcom/yeguang/paramprotocol/ParamSocket; setSock
	jmethodID mid = GetMethod(env, "Lcom/yeguang/paramprotocol/ParamSocket;",
		"setSock", "(J)V");

	env->CallVoidMethod(obj, mid, (jlong)sock);
}

/*
 * Class:     com_yeguang_paramprotocol_ParamSocket
 * Method:    Destroy
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yeguang_paramprotocol_ParamSocket_Destroy
	(JNIEnv *env, jobject obj)
{
	yeguang::ParamSocket *sock = GetSocket(env, obj);

	if (sock != NULL)
	{
		delete sock;
		sock = NULL;
	}
}


/*
 * Class:     com_yeguang_paramprotocol_ParamSocket
 * Method:    CheckConn
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yeguang_paramprotocol_ParamSocket_CheckConn
  (JNIEnv *env, jobject obj)
{
	yeguang::ParamSocket *sock = GetSocket(env, obj);

	if (sock == NULL)
	{
		return;
	}

	sock->CheckConn();
}


/*
 * Class:     com_yeguang_paramprotocol_ParamSocket
 * Method:    InputData
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_com_yeguang_paramprotocol_ParamSocket_InputData
  (JNIEnv *env, jobject obj, jbyteArray dataarry)
{
	yeguang::ParamSocket *sock = GetSocket(env, obj);

	if (sock == NULL)
	{
		return;
	}

	jbyte *data = (jbyte*)env->GetByteArrayElements(dataarry, 0);
	jsize len = env->GetArrayLength(dataarry);
	sock->InputData((char *)data, len);
	env->ReleaseByteArrayElements(dataarry, data, 0);
}

/*
 * Class:     com_yeguang_paramprotocol_ParamSocket
 * Method:    CallFunction
 * Signature: (Ljava/lang/String;Lcom/yeguang/paramprotocol/ParamArgs;)V
 */
JNIEXPORT void JNICALL Java_com_yeguang_paramprotocol_ParamSocket_CallFunction
  (JNIEnv *env, jobject obj, jstring funname, jobject args)
{
	yeguang::ParamSocket *sock = GetSocket(env, obj);

	if (sock == NULL)
	{
		return;
	}

	char *name = jstringTostring(env, funname);
	std::string strname = name;
	free(name);

	int count = GetArgsCount(env, args);

	int i = 0;
	yeguang::ParamArgs params;	

	for (i = 0; i < count; i++)
	{
		yeguang::ValueObject tmpvalue;
	    if(GetArg(env, args, i, tmpvalue))
		{
			params.AddArg(tmpvalue);
		}
	}

	sock->CallFunction(strname, params);
}
